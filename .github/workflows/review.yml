name: Auto Review

on:
  pull_request:

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download bento
        run: |
          curl -sL https://github.com/catatsuy/bento/releases/latest/download/bento-linux-amd64.tar.gz | tar xz -C /tmp
          sudo mv /tmp/bento /usr/local/bin/

      - name: Run Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # Use Secrets to set the API key
        run: |
          git diff origin/main...HEAD | bento -review > review.txt
          REVIEW_CONTENT=$(cat review.txt)
          echo "REVIEW_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$REVIEW_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Find Existing Comment
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq '.[] | select(.user.login == "github-actions[bot]" and .body | contains("Automatic Review")) | .id' \
            > comment_id.txt
          if [ -s comment_id.txt ]; then
            echo "comment_id=$(cat comment_id.txt)" >> $GITHUB_ENV
          fi

      - name: Post Review as a Comment
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ -n "${{ env.comment_id }}" ]; then
            # Update existing comment
            gh api \
              -X PATCH \
              repos/${{ github.repository }}/issues/comments/${{ env.comment_id }} \
              -f body="### Automatic Review\n${{ env.REVIEW_CONTENT }}"
          else
            # Create a new comment
            gh api \
              -X POST \
              repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
              -f body="### Automatic Review\n${{ env.REVIEW_CONTENT }}"
          fi
